'''
This code defines a PyQt5 application designed as a Face Attendance System, leveraging facial recognition 
for user authentication and registration. Here's a quick overview of its main functionalities:

- Initialization and UI Setup: The application sets up a main window with a title, a specified geometry, 
and styles using the App class derived from QMainWindow. The UI includes a label for displaying the webcam 
feed, buttons for login and registration, and a label for displaying welcome messages or login status.

- Webcam Feed Handling: It uses OpenCV (cv2) to capture video from the webcam and updates the feed in 
real-time on the UI. A QTimer is set to refresh the webcam feed within the application window.

- Facial Recognition for Login: The login function captures the current frame from the webcam, saves it 
temporarily, and uses the face_recognition and subprocess libraries to check if the face in the captured 
image matches any of the faces stored in the database. If a match is found, it logs the event with the 
user's name and the current date and time. If no match is found, it displays a login failure message.

- User Registration: Provides functionality to register a new user by capturing a frame from the webcam 
as the user's identifying image. It saves this image and its facial encoding (generated by face_recognition)
in a designated database directory, allowing the system to recognize the user in future login attempts.

- Data Storage: User facial encodings are stored in .pickle files within a database directory (db), 
and login events are logged in a text file (log.txt).

The application exemplifies integrating facial recognition with a PyQt5 GUI for creating a user-friendly 
attendance system. It uses facial recognition for authentication, providing a modern approach to user identification.
'''

import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QLabel, QVBoxLayout, QWidget, QMessageBox, QLineEdit, QStyleFactory
from PyQt5.QtGui import QPixmap, QImage, QFont
from PyQt5.QtCore import QTimer, Qt
import cv2
import os
import datetime
import pickle
import face_recognition
import subprocess

class App(QMainWindow):
    def __init__(self):
        super().__init__()
        self.title = 'Face Attendance System'
        self.video_size = (640, 480)
        self.setGeometry(100, 100, self.video_size[0] + 200, self.video_size[1] + 100)
        self.cap = cv2.VideoCapture(0)
        self.initUI()

    def initUI(self):
        # Set application style for consistency across platforms
        QApplication.setStyle(QStyleFactory.create('Fusion'))  # Set the Fusion style
        self.setWindowTitle(self.title)
        
        # Font for labels and buttons
        font = QFont("Arial", 10)
        
        # Initialize webcam label
        self.webcam_label = QLabel(self)
        self.webcam_label.resize(self.video_size[0], self.video_size[1])
        self.webcam_label.move(10, 10)
        
        # Initialize buttons
        self.login_button = QPushButton('Login', self)
        self.login_button.setFont(font)
        self.login_button.move(self.video_size[0] + 50, 20)
        self.login_button.clicked.connect(self.login)
        
        self.register_button = QPushButton('Register New User', self)
        self.register_button.setFont(font)
        self.register_button.move(self.video_size[0] + 50, 70)
        self.register_button.clicked.connect(self.register_new_user)

        # Display for welcome messages or errors
        self.welcome_message_label = QLabel(self)
        self.welcome_message_label.setFont(font)
        self.welcome_message_label.resize(400, 40)  
        self.welcome_message_label.move(self.video_size[0] + 20, 120)  
        self.welcome_message_label.setText(" ") 


        # Custom stylesheet
        self.setStyleSheet("""
            /* Styles for main window, buttons, and labels */
            QMainWindow {
                background-color: #2D2D2D; /* Dark gray background */
                font-family: 'Arial'; /* Font family */
                font-size: 12pt; /* Font size */
            }
            QPushButton {
                background-color: #A0A0A0;
                border: 1px solid #5A5A5A;
                border-radius: 4px;
                min-width: 140px;
                min-height: 40px;
                font-size: 10pt; /* Larger font size for buttons */
            }
            QPushButton:hover {
                background-color: #B0B0B0;
            }
            QLabel {
                color: #FFFFFF;
            }
        """)

        # Start timer for webcam frame updates
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_frame)
        self.timer.start(20)
        
        # Database directory for user registrations
        self.db_dir = "./db"
        if not os.path.exists(self.db_dir):
            os.mkdir(self.db_dir)
        # Log file path for attendance records
        self.log_path = "./log.txt"

    def update_frame(self):
        ret, frame = self.cap.read()
        if ret:
            self.most_recent_capture_arr = frame
            # Convert captured frame for display in the PyQt5 window
            self.image = self.convert_cv_qt(frame, self.video_size[0], self.video_size[1])
            self.webcam_label.setPixmap(self.image)
        else:
            print("Failed to capture frame")

    # Convert frame from CV2 to QPixmap format for display in PyQt5
    def convert_cv_qt(self, frame, width, height):
        rgb_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QImage(rgb_image.data, w, h, bytes_per_line, QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(width, height, Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)

    # Login functionality using face_rcognition library
    def login(self):
        unknown_img_path = "./.tmp.jpg"
        cv2.imwrite(unknown_img_path, self.most_recent_capture_arr)
        output = str(
            subprocess.check_output(["face_recognition", self.db_dir, unknown_img_path])
        )
        name = output.split(",")[1][:-5]

        if name in ["unknown_person", "no_persons_found"]:
            # Optionally, clear the label or show an error message
            self.welcome_message_label.setText("Login failed. Please try again.")
        else:
            welcome_text = f"Welcome back, {name}!"
            self.welcome_message_label.setText(welcome_text)
            with open(self.log_path, "a") as f:
                f.write(f"{name}, {datetime.datetime.now()}\n")

        os.remove(unknown_img_path)

    def register_new_user(self):
        # Setup UI for new user registration
        self.registration_window = QWidget()
        self.registration_window.setWindowTitle('Register New User')
        self.registration_window.setGeometry(100, 100, 400, 200)
        self.registration_window.setStyleSheet("""
            QWidget {
                background-color: #2D2D2D; /* Dark gray background */
            }
            QPushButton {
                background-color: #A0A0A0;
                border: 1px solid #5A5A5A;
                border-radius: 4px;
                min-width: 140px;
                min-height: 40px;
                font-family: 'Arial'; /* Font family */
                font-size: 10pt; /* Larger font size for buttons */
            }
            QPushButton:hover {
                background-color: #B0B0B0;
            }
            QLineEdit {
                border: 1px solid #5A5A5A;
                border-radius: 4px;
                min-height: 30px;
                color: #FFFFFF;
                background-color: #333333;
                font-family: 'Arial';
                font-size: 10pt;
            }
            QLabel {
                color: #FFFFFF;
                font-family: 'Arial';
                font-size: 10pt;
            }
        """)

        layout = QVBoxLayout()
        self.name_entry = QLineEdit(self.registration_window)
        self.register_btn = QPushButton('Register')
        self.register_btn.clicked.connect(self.perform_registration)

        layout.addWidget(QLabel('Enter user name:'))
        layout.addWidget(self.name_entry)
        layout.addWidget(self.register_btn)

        self.registration_window.setLayout(layout)
        self.registration_window.show()

    # Handle new user registration and save their face encoding
    def perform_registration(self):
        user_name = self.name_entry.text()
        if user_name:
            known_img_path = os.path.join(self.db_dir, f"{user_name}.jpg")
            cv2.imwrite(known_img_path, self.most_recent_capture_arr)
            known_image = face_recognition.load_image_file(known_img_path)
            known_encoding = face_recognition.face_encodings(known_image)[0]
            with open(os.path.join(self.db_dir, f"{user_name}.pickle"), "wb") as file:
                pickle.dump(known_encoding, file)
            QMessageBox.information(self.registration_window, "Registration Successful", f"User {user_name} registered successfully!", QMessageBox.Ok, QMessageBox.Ok)
            self.registration_window.close()
        else:
            QMessageBox.warning(self.registration_window, "Registration Failed", "Please enter a valid user name.", QMessageBox.Ok, QMessageBox.Ok)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = App()
    ex.show()
    sys.exit(app.exec_())
